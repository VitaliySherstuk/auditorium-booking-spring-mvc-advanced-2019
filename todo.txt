#################### Module 4 ####################


Practical Task on SOAP WS

Task description:

Done
1. Mark User and Event entites with appropriate JAXB annotations to enable JAXB binding.

Done (see src/main/resources/soap)
2. Based on annotated entity classes generate XML schema via schemagen tool.

Done
3. Generate JAXB-derived service classes using xjc tool.

Done partially(some for UserService)
4. Create SOAP based web-service endpoints to serve all User and Event
related operations.

Done
5. Add Spring WS application context configuration.

Done(partially: for UserEndpoints)
6. Implement test client for above mentioned endpoints via spring WebServiceTemplate.


#################### Module 4 ####################


#################### Module 3 ####################
Task description:

DONE
1. Add new entity to the application - UserAccount, it should
store the amount of prepaid money user has in the system, which
 should be used during booking procedure. Add methods for refilling
  the account to the BookingFacade class. Add DAO and service
  objects for new entity. Add ticketPrice field to Event entity.

DONE
2. Update ticket booking methods to check and withdraw money
from user account according to the ticketPrice for particular event.

DONE
3. Configure appropriate PlatformTransactionManager implementation
 in Spring application context.

DONE
4. Make ticket booking methods transactional using Spring declarative
 transactions management (either xml or annotation based config).


#################### Module 3 ####################


#################### Module 2 ####################
Task description:

DONE
1. Configure Spring Security for ticket booking web application - add DelegatingFilterProxy to web.xml

DONE
2. Configure access control via security namespace. All application operations should be
accessible to users with role RESGISTERED_USER only. Getting booked tickets for particular
event should be accessible only to users with role BOOKING_MANAGER. Add two new fields to
User entity - password and roles. Roles field should contain comma-separated list of user
roles. All users in database should have REGISTERED_USER role by default. Create several
test users with additional BOOKING_MANAGER role.

DONE
3. Implement form-based login via security namespace, add custom login page, configure
DAOAuthenticationProvider and UserDetailsService to load user data from database. Configure logout filter.

DONE
4. Configure Remember-Me authentication.

5. Implement password encoding during authentication.

#################### Module 2 ####################




#################### Module 1 ####################
Task description:

DONE (using the project provided by my mentor)
1. Based on the codebase of previous hometasks, create a web application,
configure Spring MVC application context and dispatcher servlet.

DONE
2. For all Booking operations implement Spring MVC annotation-based controllers.

DONE
3. For operations that return one or several entites as a result
(e.g. getUserByEmail, getUsersByName, getBookedTickets) implement simple
 views rendered via Freemarker template engine. Use FreeMarkerViewResolver
  for view resolving procedure.

DONE (beans.controllers.BookingPDFController)
4. For operations, that return list of booked tickets (by event, or by
user) implement alternative controllers, that will return result as PDF
document. Map this controller to a specific value of Accept request header
  - Accept=application/pdf

DONE (beans.controllers.BatchEventUploadController, beans.controllers.BatchUserUploadController)
5. Implement batch loading of users and events into system. In order to
do this, create controller which accepts multipart file upload, parses
it and calls all Booking functionality methods to add events and users
into the system. The format of the file (JSON, XML, ...) is up to you
as long as you can implement the correct parsing procedure.

DONE (see controllers.advice.GenericExceptionHandler)
6. Implement generic exception handler which should redirect all controller
exceptions to simple Freemarker view, that just prints exception message.

#################### Module 1 ####################